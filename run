#!/usr/bin/env python3#!/usr/bin/env python3

"""import sys

Universal Cross-Platform Launcher Bootstrapimport subprocess

===========================================import platform

Automatically detects Python and launches the main launcher

"""# Auto-detect Python command

import sysif platform.system() == "Windows":

import subprocess    python_cmds = ["python", "py", "python3"]

import platformelse:

    python_cmds = ["python3", "python"]

def find_python():

    """Find best Python command for this platform"""python_cmd = None

    if platform.system() == "Windows":for cmd in python_cmds:

        commands = ["python", "py", "python3"]    try:

    else:        result = subprocess.run([cmd, "--version"], capture_output=True, timeout=3)

        commands = ["python3", "python"]        if result.returncode == 0 and b"Python 3" in result.stdout:

                python_cmd = cmd

    for cmd in commands:            break

        try:    except:

            result = subprocess.run([cmd, "--version"],         continue

                                  capture_output=True, timeout=3)

            if result.returncode == 0 and b"Python 3" in result.stdout:if not python_cmd:

                return cmd    print("‚ùå Python 3.x not found!")

        except:    exit(1)

            continue

    return None# Launch universal launcher

subprocess.run([python_cmd, "launch.py"] + sys.argv[1:])

def main():

    python_cmd = find_python()
    if not python_cmd:
        print("‚ùå Python 3.x not found!")
        print("Please install Python 3.8+ from python.org")
        return 1
    
    # Launch universal launcher
    try:
        subprocess.run([python_cmd, "launch.py"] + sys.argv[1:])
    except FileNotFoundError:
        print("‚ùå launch.py not found!")
        print("Please ensure you're in the correct directory")
        return 1
    except KeyboardInterrupt:
        print("\nüõë Interrupted")
        return 0

if __name__ == "__main__":
    exit(main())